apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.images.objectengine.name }}
  labels:
    app: {{ .Values.images.objectengine.name }}
    chart: {{ .Values.images.objectengine.name }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.images.objectengine.name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.images.objectengine.name }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Values.images.objectengine.name }}
          image: "{{ .Values.images.openscout.repository }}:{{ .Values.images.openscout.tag }}"
          imagePullPolicy: {{ .Values.images.openscout.pullPolicy }}
          command: {{ .Values.images.objectengine.command }}
          args: {{ .Values.images.objectengine.args }}
          resources:
            {{ if .Values.images.objectengine.GPU_enabled }}
            limits:
              nvidia.com/gpu: 1
            {{ end }}   
          env:
            - name: "WEBSERVER"
              value: "{{.Values.images.httpd.url}}:{{.Values.images.httpd.nodePort}}"
      #These containers are run during pod initialization, and if no model url specified by users, the deployment will use the coco.pt as default model under the ./models dir
      initContainers:
        {{ if .Values.images.objectengine.model.url }}
        - name: prepare-model
          image: busybox:1.28
          command:
            - wget
            - "-O"
            - {{ printf "%s/%s" "/openscout-server/models" .Values.images.objectengine.model.name }}
            - {{.Values.images.objectengine.model.url}}
        {{ end }}



